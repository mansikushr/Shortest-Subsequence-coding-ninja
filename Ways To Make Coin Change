# Shortest-Subsequence-coding-ninja
import java.util.Arrays;

public class Solution 
{
	private static long countWaysToMakeChangeHelper(int denominations[], int value, int n, long[][] dp) 
    {
		// If total is 0, return 1 (solution found)
		if (value == 0) 
        {
			return 1;
		}

		// Return 0 (solution do not exist) if total become negative or
		// No elements are left
		if (n < 0 || value < 0) 
        {
			return 0;
		}

		// If value is already computed then just return answer from dp array
		if (dp[n][value] != -1) {
			return dp[n][value];
		}
		
		// Case 1. include current coin S[n] in solution and recur
		// With remaining change (N - S[n]) with same number of coins
		long incl = countWaysToMakeChangeHelper(denominations,  value - denominations[n], n, dp);

		// Case 2. exclude current coin S[n] from solution and recur
		// For remaining coins (n - 1)
		long excl = countWaysToMakeChangeHelper(denominations, value , n-1, dp);

		// Return total ways by including or excluding current coin
		dp[n][value] = incl + excl;
		return incl + excl;
	}
	
	public static long countWaysToMakeChange(int denominations[], int value)
    {
		int n = denominations.length;
		long[][] dp = new long[n][value + 1];
		
		for (int i = 0; i < n; i++) 
        {
			Arrays.fill(dp[i], -1);
		}
		
		return countWaysToMakeChangeHelper(denominations, value, n-1, dp);
	}


    
}
